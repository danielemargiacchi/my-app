// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  username        String
  displayUsername String?

  name          String?
  email         String?
  emailVerified Boolean
  image         String?

  sessions      Session[]
  accounts      Account[]

  createdProjects Project[]     @relation("ProjectOwner")
  tasksAssigned   Task[]        @relation("TaskAssignee")
  projectAccess   ProjectUser[] // Progetti a cui l'utente ha accesso

  @@unique([username])
  @@map("users")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  createdAt             DateTime
  updatedAt             DateTime


  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("accounts")
}

model Verification {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}


model Project {
  id            String      @id @default(cuid())
  name          String
  description   String?
  projectCode   String      @unique // Codice alfanumerico univoco
  ownerId       String
  owner         User        @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks         Task[]
  users         ProjectUser[] // Utenti che hanno accesso al progetto
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model ProjectUser {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([projectId, userId])
  @@index([userId]) // Per query veloci sui progetti di un utente
}

model Task {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         Status   @default(TODO)
  projectId      String
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUserId String?  // Pu√≤ essere non assegnato o assegnato a un utente specifico del progetto
  assignedUser   User?    @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}